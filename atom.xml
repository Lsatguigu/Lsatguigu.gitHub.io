<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白孝安&amp;博客</title>
  
  <subtitle>好雨知时节 当春乃发生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-02T05:36:54.989Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>白孝安</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb项目实战(适合新手)</title>
    <link href="http://example.com/2022/10/02/09-42-42/"/>
    <id>http://example.com/2022/10/02/09-42-42/</id>
    <published>2022-10-02T01:42:42.000Z</published>
    <updated>2022-10-02T05:36:54.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb一个完整的搭建"><a href="#JavaWeb一个完整的搭建" class="headerlink" title="JavaWeb一个完整的搭建"></a>JavaWeb一个完整的搭建</h1><p>本文章仅供参考，适合新手搭建JavaWeb，学习此文章来打打基础还是可以的，如果有错误或者写的不好的地方，请多多指教。</p><p><strong>最后本项目只是提供一个框架和思路，对前端界面不做美化</strong></p><span id="more"></span><p>主要功能有：</p><p>1.用户注册</p><p>2.用户登录</p><p>3.用户列表展示</p><p>4.用户信息修改</p><p>5.用户信息删除</p><p>涉及到的知识点有：  </p><p>1.JDBC</p><p>2.Servlet</p><p>3.过滤器</p><p>4..EL与JSTL表达式</p><h2 id="1-新建mysql数据库"><a href="#1-新建mysql数据库" class="headerlink" title="1.新建mysql数据库"></a>1.新建mysql数据库</h2><p>新建一个数据库<code>test</code>,然后生成对应表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL auto_increment,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `pwd` varchar(255) NOT NULL,</span><br><span class="line">  `sex` varchar(255) NOT NULL,</span><br><span class="line">  `home` varchar(255) NOT NULL,</span><br><span class="line">  `info` varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY  (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">INSERT INTO `user` VALUES (&#x27;3&#x27;, &#x27;123&#x27;, &#x27;123&#x27;, &#x27;123&#x27;, &#x27;123&#x27;, &#x27;123&#x27;);</span><br><span class="line">INSERT INTO `user` VALUES (&#x27;4&#x27;, &#x27;123123&#x27;, &#x27;123123&#x27;, &#x27;男&#x27;, &#x27;北京&#x27;, &#x27;123123&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2022/10/02/09-42-42/image-20221002095119656.png" alt="image-20221002095119656"></p><p>这里使用到了navicat for mysql   这是一种mysql的图形界面化工具，后期可以非常方便的操作数据库。</p><h2 id="2-IDEA新建一个maven项目"><a href="#2-IDEA新建一个maven项目" class="headerlink" title="2.IDEA新建一个maven项目"></a>2.IDEA新建一个maven项目</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bxa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myjavaweb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加web配置"><a href="#3-添加web配置" class="headerlink" title="3.添加web配置"></a>3.添加web配置</h2><p><img src="/2022/10/02/09-42-42/image-20221002101506397.png" alt="image-20221002101506397"></p><h2 id="4-建立对应的包结构"><a href="#4-建立对应的包结构" class="headerlink" title="4.建立对应的包结构"></a>4.建立对应的包结构</h2><p>com.bxa.filter  &#x2F;&#x2F;过滤器 解决中文字符集乱码<br>com.bxa.util   &#x2F;&#x2F;数据库连接工具类<br>com.bxa.entity  &#x2F;&#x2F;实体类<br>com.bxa.dao    &#x2F;&#x2F;数据操作类<br>com.bxa.servlet  &#x2F;&#x2F;servlet类</p><p><img src="/2022/10/02/09-42-42/image-20221002095948828.png" alt="image-20221002095948828"></p><h2 id="5-filter的设置"><a href="#5-filter的设置" class="headerlink" title="5.filter的设置"></a>5.filter的设置</h2><p>新建一个<code>EncodingFilter</code>类用来解决中文字符集乱码，它需要实现<code>Filter</code>接口，并重写<code>doFilter</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EncodingFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-web-xml的设置"><a href="#6-web-xml的设置" class="headerlink" title="6.web.xml的设置"></a>6.web.xml的设置</h2><p>在web.xml下进行对<code>EncodingFilter</code>类相应的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bxa.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span><span class="comment">&lt;!--全路径 从根包开始一直到类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--*即为过滤所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>denglu.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-util的设置"><a href="#7-util的设置" class="headerlink" title="7.util的设置"></a>7.util的设置</h2><p>新建一个<code>DBconn</code>类用来处理对数据库的连接操作（用户名或密码按照自己的数据库更改）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBconn</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useunicuee=true&amp; characterEncoding=utf8&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;7421279&quot;</span>;<span class="comment">//这里改成你的密码和账号</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;init [SQL驱动程序初始化失败！]&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">addUpdDel</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            i = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;sql数据库增删改异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title function_">selectSql</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            rs = ps.executeQuery(sql);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;sql数据库查询异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;sql数据库关闭异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-entity的设置"><a href="#8-entity的设置" class="headerlink" title="8.entity的设置"></a>8.entity的设置</h2><p>新建一个<strong>User实体类</strong></p><blockquote><p>实体即抽象出来的用户对象，对应数据库中的user表,表中每个字段在实体中为一个属性，也可以理解为一个User对象对应数据库中的user表一条记录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String home;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHome</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHome</span><span class="params">(String home)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.home = home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-dao的设置"><a href="#9-dao的设置" class="headerlink" title="9.dao的设置"></a>9.dao的设置</h2><p>新建一个UserDao接口  以及对应的方法实现类</p><blockquote><p>使用接口类是为了规范开发</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String name,String pwd)</span>; <span class="comment">//登录功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(User user)</span>;           <span class="comment">//注册功能</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserAll</span><span class="params">()</span>;               <span class="comment">//返回用户信息集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;                <span class="comment">//根据id删除用户</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> id,String name, String pwd,String sex, String home,String info)</span> ;<span class="comment">//更新用户信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建UserDaoImpl.java实现UserDao接口，及未实现的方法</p><blockquote><p>SQL语句建议在mysql中测试以下，没有问题然后在拿到实现类中使用，可以避免无必要的麻烦</p><p>本例子SQL使用字符串拼接的方式，其实还有一种预加载的方式，有兴趣的童鞋可以参考我的博客，了解预加载的方式处理SQL语句与字符串拼接方式的区别。</p><p><img src="/2022/10/02/09-42-42/image-20221002103254809.png" alt="image-20221002103254809"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.bxa.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.bxa.util.DBconn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBconn.init();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> DBconn.selectSql(<span class="string">&quot;select * from user where name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27; and pwd=&#x27;&quot;</span> + pwd + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs.getString(<span class="string">&quot;name&quot;</span>).equals(name) &amp;&amp; rs.getString(<span class="string">&quot;pwd&quot;</span>).equals(pwd)) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            DBconn.closeConn();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        DBconn.init();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> DBconn.addUpdDel(<span class="string">&quot;insert into user(name,pwd,sex,home,info) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;values(&#x27;&quot;</span> + user.getName() + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + user.getPwd() + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + user.getSex() + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + user.getHome() + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + user.getInfo() + <span class="string">&quot;&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DBconn.closeConn();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBconn.init();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> DBconn.selectSql(<span class="string">&quot;select * from user&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                user.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                user.setPwd(rs.getString(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">                user.setSex(rs.getString(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">                user.setHome(rs.getString(<span class="string">&quot;home&quot;</span>));</span><br><span class="line">                user.setInfo(rs.getString(<span class="string">&quot;info&quot;</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">            DBconn.closeConn();</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        DBconn.init();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete  from user where id=&quot;</span> + id;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> DBconn.addUpdDel(sql);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DBconn.closeConn();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> id, String name, String pwd, String sex, String home, String info)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        DBconn.init();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name =&#x27;&quot;</span> + name</span><br><span class="line">                + <span class="string">&quot;&#x27; , pwd =&#x27;&quot;</span> + pwd</span><br><span class="line">                + <span class="string">&quot;&#x27; , sex =&#x27;&quot;</span> + sex</span><br><span class="line">                + <span class="string">&quot;&#x27; , home =&#x27;&quot;</span> + home</span><br><span class="line">                + <span class="string">&quot;&#x27; , info =&#x27;&quot;</span> + info + <span class="string">&quot;&#x27; where id = &quot;</span> + id;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> DBconn.addUpdDel(sql);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DBconn.closeConn();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-servlet的用户登录设置"><a href="#10-servlet的用户登录设置" class="headerlink" title="10.servlet的用户登录设置"></a>10.servlet的用户登录设置</h2><p>创建<code>DengluServlet</code>类用来实现对用户登录的操作</p><blockquote><p>Servlet有两种方式创建，一种手工创建。另一种程序自动生成。前者自己创建java类，实现Servlet具体内容，然后需要去WEB_INF下的web.xml去配置servlet  . 而后者则直接由程序替我们配置好了Servlet</p><p>本例子使用第二种方式生成Servlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DengluServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123; <span class="comment">//需要继承HttpServlet  并重写doGet  doPost方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request,response);<span class="comment">//将信息使用doPost方法执行   对应jsp页面中的form表单中的method</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">ud</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ud.login(name,pwd))&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;xiaoxi&quot;</span>,<span class="string">&quot;欢迎用户,&quot;</span>+name);<span class="comment">//向request域中放置信息</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(request,response);<span class="comment">//转发到成功页面</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);<span class="comment">//重定向到首页</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两点要注意的地方：</p><p>一：getParameter与getAttribute两者的区别</p><p>request.setAttribute(“xiaoxi”, “欢迎用户”+name);&#x2F;&#x2F;向request域中放置信息 （ 键值对的形式）  名字为xiaoxi  内容为”欢迎用户”+name</p><p>request.getAttribute(“xiaoxi”);&#x2F;&#x2F;得到request域中放置名字为xiaoxi的信息</p><p>request.getParameter(“name”);&#x2F;&#x2F;得到request域的参数信息（得到jsp页面传过来的参数）</p><p>getAttribute表示从request范围取得设置的属性，必须要先setAttribute设置属性，才能通过getAttribute来取得，设置与取得的为Object对象类型 。</p><p>getParameter表示接收参数，参数为页面提交的参数，包括：表单提交的参数、URL重写（就是xxx?id&#x3D;1中的id）传的参数等，因此这个并没有设置参数的方法（没有setParameter），而且接收参数返回的不是Object，而是String类型</p><p>二：转发与重定向的区别</p><p>（1）.重定向的执行过程：Web服务器向浏览器发送一个http响应–》浏览器接受此响应后再发送一个新的http请求到服务器–》服务器根据此请求寻找资源并发送给浏览器。它可以重定向到任意URL，不能共享request范围内的数据。<br>（2）.重定向是在客户端发挥作用，通过新的地址实现页面转向。<br>（3）.重定向是通过浏览器重新请求地址，在地址栏中可以显示转向后的地址。<br>（4）.转发过程：Web服务器调用内部方法在容器内部完成请求和转发动作–》将目标资源发送给浏览器，它只能在同一个Web应用中使用，可以共享request范围内的数据。<br>（5）.转发是在服务器端发挥作用，通过forward()方法将提交信息在多个页面间进行传递。<br>（6）.转发是在服务器内部控制权的转移，客户端浏览器的地址栏不会显示出转向后的地址。</p><h2 id="11-servlet的用户注册设置"><a href="#11-servlet的用户注册设置" class="headerlink" title="11.servlet的用户注册设置"></a>11.servlet的用户注册设置</h2><p>创建一个<code>ZhuceServlet</code>类用来实现用户注册的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bxa.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhuceServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>); <span class="comment">//获取jsp页面传过来的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">home</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;home&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">//实例化一个对象，组装属性</span></span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setPwd(pwd);</span><br><span class="line">        user.setSex(sex);</span><br><span class="line">        user.setHome(home);</span><br><span class="line">        user.setInfo(info);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">ud</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ud.register(user)) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;username&quot;</span>, name);  <span class="comment">//向request域中放置参数</span></span><br><span class="line">            <span class="comment">//request.setAttribute(&quot;xiaoxi&quot;, &quot;注册成功&quot;);</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/denglu.jsp&quot;</span>).forward(request, response);  <span class="comment">//转发到登录页面</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);<span class="comment">//重定向到首页</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-servlet的返回所有用户信息设置"><a href="#12-servlet的返回所有用户信息设置" class="headerlink" title="12.servlet的返回所有用户信息设置"></a>12.servlet的返回所有用户信息设置</h2><p>创建<code>SearchallServlet</code>类用来返回数据库中所有用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bxa.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Searchall</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">ud</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        List&lt;User&gt; userAll = ud.getUserAll();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;userAll&quot;</span>, userAll);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/showall.jsp&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-servlet的删除用户设置"><a href="#13-servlet的删除用户设置" class="headerlink" title="13.servlet的删除用户设置"></a>13.servlet的删除用户设置</h2><p>创建<code>DeleteServlet</code>类用来删除用户操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> Integer.parseInt(id);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">ud</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ud.delete(userId)) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;xiaoxi&quot;</span>, <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/Searchall&quot;</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-servlet的用户更新设置"><a href="#14-servlet的用户更新设置" class="headerlink" title="14.servlet的用户更新设置"></a>14.servlet的用户更新设置</h2><p>创建UpdateServlet类操作用来更新用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bxa.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.bxa.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> Integer.parseInt(id);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">home</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;home&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------&quot;</span> + userId);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">ud</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ud.update(userId, name, pwd, sex, home, info)) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;xiaoxi&quot;</span>, <span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/Searchall&quot;</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15-配置servlet"><a href="#15-配置servlet" class="headerlink" title="15.配置servlet"></a>15.配置servlet</h2><blockquote><p> 附完整web.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span><span class="comment">&lt;!--过滤器配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bxa.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span><span class="comment">&lt;!--全路径 从根包开始一直到类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--*即为过滤所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="comment">&lt;!--servlet类路径配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DengluServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bxa.servlet.DengluServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ZhuceServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bxa.servlet.ZhuceServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Searchall<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bxa.servlet.Searchall<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DeleteServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bxa.servlet.DeleteServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UpdateServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bxa.servlet.UpdateServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!--servlet类映射配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DengluServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/DengluServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ZhuceServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ZhuceServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Searchall<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Searchall<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DeleteServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/DeleteServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UpdateServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/UpdateServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span><span class="comment">&lt;!--默认首页地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>denglu.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="16-新建jsp页面"><a href="#16-新建jsp页面" class="headerlink" title="16.新建jsp页面"></a>16.新建jsp页面</h2><blockquote><p><strong>denglu.jsp 用户登录页面</strong>      默认页面进入项目后  先进入该页面（web.xml中配置）    </p><p>form表单中需要注意的是<form action="DengluServlet" method="post"></form></p><p>其中action即为要跳转的servlet路径（即在web.xml中配置的servlet-mapping   ：<url-pattern>&#x2F;DengluServlet</url-pattern>   ，）写  &#x2F;  后的内容。</p><p>method&#x3D;”post”为传递值得方法类型有两种，第一种get,第二种post。网上介绍这两种的区别有很多，阐述的又是百家争鸣。而我觉得那个方便就用那个，一般使用post传递，可避免乱码。</p><p>另一个需要注意的是   用户名：<input type="text" name="name" value>  input标签  一定要起个名字  如name&#x3D;”name”  </p><p>起名的作用就是让后台通过request.getParterment(“name”);来取值</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录注册页面&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body &gt;</span><br><span class="line">         &lt;form action=<span class="string">&quot;DengluServlet&quot;</span>  method=<span class="string">&quot;post&quot;</span>  style=<span class="string">&quot;padding-top:-700px;&quot;</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>value=<span class="string">&quot;&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"> 密码：  &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>value=<span class="string">&quot;&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span>value=<span class="string">&quot;登录&quot;</span>name=<span class="string">&quot;denglu&quot;</span>&gt;&lt;input type=<span class="string">&quot;reset&quot;</span>value=<span class="string">&quot;重置&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line"> &lt;form action=<span class="string">&quot;zhuce.jsp&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span>value=<span class="string">&quot;新用户注册&quot;</span>&gt;</span><br><span class="line">         &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/02/09-42-42/image-20221002125623009.png" alt="image-20221002125623009"></p><p><strong>zhuce.jsp  用户注册页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;BB.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body &gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;ZhuceServlet&quot;</span>method=<span class="string">&quot;post&quot;</span> style=<span class="string">&quot;padding-top:-700px;&quot;</span>&gt;</span><br><span class="line">   输入用户名:&lt;input name=<span class="string">&quot;name&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">   输入密码:&lt;input name=<span class="string">&quot;pwd&quot;</span> type=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">   选择性别:&lt;input type=<span class="string">&quot;radio&quot;</span>name=<span class="string">&quot;sex&quot;</span>value=<span class="string">&quot;男&quot;</span>checked&gt;男</span><br><span class="line">        &lt;input type=<span class="string">&quot;radio&quot;</span>name=<span class="string">&quot;sex&quot;</span>value=<span class="string">&quot;女&quot;</span>&gt;女&lt;br&gt;&lt;br&gt;</span><br><span class="line">   选择家乡:</span><br><span class="line">   &lt;select name=<span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">&quot;上海&quot;</span>&gt;上海&lt;/option&gt;</span><br><span class="line">   &lt;option value=<span class="string">&quot;北京&quot;</span> selected&gt;北京&lt;/option&gt;</span><br><span class="line">   &lt;option value=<span class="string">&quot;纽约&quot;</span>&gt;纽约&lt;/option&gt;</span><br><span class="line">   &lt;/select&gt;&lt;br&gt;</span><br><span class="line">               填写个人信息:&lt;br&gt;</span><br><span class="line">   &lt;textarea name=<span class="string">&quot;info&quot;</span> row=<span class="string">&quot;5&quot;</span>cols=<span class="string">&quot;30&quot;</span>&gt;&lt;/textarea&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;reset&quot;</span>value=<span class="string">&quot;重置&quot;</span>&gt;&lt;input type=<span class="string">&quot;submit&quot;</span>value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/02/09-42-42/image-20221002130131057.png" alt="image-20221002130131057"></p><p>可以看到地址栏发生变化，填写好信息右击注册</p><p><img src="/2022/10/02/09-42-42/image-20221002130019528.png" alt="image-20221002130019528"></p><p>实现了浏览器和数据库交互</p><p><img src="/2022/10/02/09-42-42/image-20221002130405645.png" alt="image-20221002130405645"></p><p><strong>index.jsp  失败页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">  <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;My JSP <span class="string">&#x27;index.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;失敗&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>右键登录</p><p><img src="/2022/10/02/09-42-42/image-20221002130808111.png" alt="image-20221002130808111"></p><p>成功登录，出现404是因为还没有创建success.jsp文件</p><p><img src="/2022/10/02/09-42-42/image-20221002130841941.png" alt="image-20221002130841941"></p><p>登录失败</p><p><img src="/2022/10/02/09-42-42/image-20221002130921709.png" alt="image-20221002130921709"></p><p><strong>success.jsp  成功页面</strong></p><p>${xiaoxi}为EL表达式  获取request域中的键名为xiaoxi的值</p><p><img src="/2022/10/02/09-42-42/image-20221002131056424.png" alt="image-20221002131056424"></p><p>登录成功</p><p><img src="/2022/10/02/09-42-42/image-20221002131121775.png" alt="image-20221002131121775"></p><p><strong>showall.jsp  展现所有用户页面</strong></p><blockquote><p>页面使用的到JSTL表达式 即c标签。使用c标签需要引入头文件&lt;%@ taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;%&gt;">http://java.sun.com/jsp/jstl/core&quot;%&gt;</a> 。</p><p>需要注意的的是El标签配合JSTl标签的使用，&lt;c:forEach var&#x3D;”U” items&#x3D;”${userAll}”  &gt;   例子foeEach标签的遍历内容即为EL表达式获取的${userAll}</p><p>而且当指定别名后var&#x3D;”U”  ，别名可以随便起，为了方便一般是小写类名命名。  </p><p>C标签内遍历的属性也是需要用${  }获取。此时别名U即为当前集合中的User对象，想得到属性只需要用 ${ U.属性名 }     即可</p></blockquote><p><img src="/2022/10/02/09-42-42/image-20221002132007026.png" alt="image-20221002132007026"></p><p>项目结构</p><p><img src="/2022/10/02/09-42-42/image-20221002132153706.png" alt="image-20221002132153706"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaWeb一个完整的搭建&quot;&gt;&lt;a href=&quot;#JavaWeb一个完整的搭建&quot; class=&quot;headerlink&quot; title=&quot;JavaWeb一个完整的搭建&quot;&gt;&lt;/a&gt;JavaWeb一个完整的搭建&lt;/h1&gt;&lt;p&gt;本文章仅供参考，适合新手搭建JavaWeb，学习此文章来打打基础还是可以的，如果有错误或者写的不好的地方，请多多指教。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后本项目只是提供一个框架和思路，对前端界面不做美化&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="javaweb" scheme="http://example.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm中git的操作</title>
    <link href="http://example.com/2022/09/11/10-35-34/"/>
    <id>http://example.com/2022/09/11/10-35-34/</id>
    <published>2022-09-11T02:35:34.000Z</published>
    <updated>2022-09-11T02:49:28.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日常开发中, 经常会使用 <code>Git</code> 来管理项目, IDE 使用 <code>Pycharm</code> , 使用 <code>Pycharm</code> 中的 <code>Git</code> 操作可以大大节省直接使用命令敲代码的时间.<br>下面教大家如何使用 <code>Pycharm</code> 里面的 <code>Git</code> 插件来进行图形化的操作.</p><span id="more"></span><h2 id="一、git-clone-克隆"><a href="#一、git-clone-克隆" class="headerlink" title="一、git clone(克隆)"></a>一、git clone(克隆)</h2><ul><li>使用 <code>右键</code> 来进行 <code>clone</code> 操作克隆远程仓库:</li><li>右键 <code>项目</code> - &gt; <code>Git</code> -&gt; <code>克隆(clone)</code></li></ul><p><img src="/2022/09/11/10-35-34/image-20220911093915533.png" alt="image-20220911093915533"></p><ul><li>填入仓库的 <code>git</code> 地址 , 这里填入了 <code>pytorch</code> 的 git 地址:</li></ul><p><img src="/2022/09/11/10-35-34/image-20220911094210862.png" alt="image-20220911094210862"></p><ul><li>点击窗口右下方的 <code>[ clone ]</code> 之后会开始克隆操作, 可以看到 <code>Pycharm</code> 下方有进度条</li></ul><p><img src="/2022/09/11/10-35-34/image-20220911094327873.png" alt="image-20220911094327873"></p><p>拉取成功后,会弹出如下图所示的窗口,选择 <code>此窗口</code> 或者 <code>新窗口</code> 即可:</p><h2 id="二、git-commit-提交"><a href="#二、git-commit-提交" class="headerlink" title="二、git commit(提交)"></a>二、git commit(提交)</h2><ul><li>修改好文件之后,需要 <code>Commit</code> 操作.</li></ul><p><strong>Pycharm Commit 窗口</strong></p><p><img src="/2022/09/11/10-35-34/image-20220911094901039.png" alt="image-20220911094901039"></p><ul><li>注意当我点击提交时</li></ul><p><img src="/2022/09/11/10-35-34/image-20220911095316657.png" alt="image-20220911095316657"></p><ul><li>可以看到多了一行，这就是我在git commit -m XX中<code>XX</code>的内容</li></ul><p><img src="/2022/09/11/10-35-34/image-20220911095345583.png" alt="image-20220911095345583"></p><h2 id="三、git-pull-拉取"><a href="#三、git-pull-拉取" class="headerlink" title="三、git pull(拉取)"></a>三、git pull(拉取)</h2><p><img src="/2022/09/11/10-35-34/image-20220911095738024.png" alt="image-20220911095738024"></p><p>- </p><p><img src="/2022/09/11/10-35-34/image-20220911100020702.png" alt="image-20220911100020702"></p><ul><li>在右下角弹出这个就代表<strong>拉取成功</strong></li></ul><p><img src="/2022/09/11/10-35-34/image-20220911100031959.png" alt="image-20220911100031959"></p><h2 id="四、处理冲突"><a href="#四、处理冲突" class="headerlink" title="四、处理冲突"></a>四、处理冲突</h2><p>使用gitee新建一个项目，项目初始有一个<code>README.MD</code>和两个分支<code>dev</code>、<code>master</code>。</p><p><img src="/2022/09/11/10-35-34/image-20220911101120264.png" alt="image-20220911101120264"></p><p><strong>1、说明</strong></p><ul><li>两个分支同一个文件里面的代码不一样，如果合并就会冲突。现在我们就来合并分支 <code>dev</code> &gt; <code>master</code></li></ul><p><img src="/2022/09/11/10-35-34/image-20220911101830719.png" alt="image-20220911101830719"></p><ul><li><p>推荐使用<code>合并</code></p><p><img src="/2022/09/11/10-35-34/image-20220911101951677.png" alt="image-20220911101951677"></p></li></ul><p><img src="/2022/09/11/10-35-34/image-20220911102113795.png" alt="image-20220911102113795"></p><p><img src="/2022/09/11/10-35-34/image-20220911102125515.png" alt="image-20220911102125515"></p><ul><li><p>完成了</p><p><img src="/2022/09/11/10-35-34/image-20220911102148988.png" alt="image-20220911102148988"></p></li><li><p>所有的冲突都解决之后,点击右下方的 <code>[应用]</code> 即可.</p></li></ul><h2 id="五、git-push-推送"><a href="#五、git-push-推送" class="headerlink" title="五、git push(推送)"></a>五、git push(推送)</h2><p><img src="/2022/09/11/10-35-34/image-20220911102449755.png" alt="image-20220911102449755"></p><ul><li>看到无误后点<code>[推送]</code></li></ul><p><img src="/2022/09/11/10-35-34/image-20220911102842966.png" alt="image-20220911102842966"></p><ul><li><p>右下角看到这个不是推送成功！</p><p><img src="/2022/09/11/10-35-34/image-20220911103148503.png" alt="image-20220911103148503"></p></li></ul><h2 id="六、git-status-查看-Git-记录"><a href="#六、git-status-查看-Git-记录" class="headerlink" title="六、git status(查看 Git 记录)"></a>六、git status(查看 Git 记录)</h2><p><img src="/2022/09/11/10-35-34/image-20220911103252482.png" alt="image-20220911103252482"></p><p><img src="/2022/09/11/10-35-34/image-20220911103332133.png" alt="image-20220911103332133"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是 <code>Pycharm</code> 中 <code>Git</code> 的简单操作, 学会之后可以在工作中完成绝大部分的 <code>Git</code> 操作, 学到的小伙伴赶紧用起来.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;日常开发中, 经常会使用 &lt;code&gt;Git&lt;/code&gt; 来管理项目, IDE 使用 &lt;code&gt;Pycharm&lt;/code&gt; , 使用 &lt;code&gt;Pycharm&lt;/code&gt; 中的 &lt;code&gt;Git&lt;/code&gt; 操作可以大大节省直接使用命令敲代码的时间.&lt;br&gt;下面教大家如何使用 &lt;code&gt;Pycharm&lt;/code&gt; 里面的 &lt;code&gt;Git&lt;/code&gt; 插件来进行图形化的操作.&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
    <category term="PyCharm" scheme="http://example.com/tags/PyCharm/"/>
    
  </entry>
  
  <entry>
    <title>JDBC总复习</title>
    <link href="http://example.com/2022/09/11/09-20-48/"/>
    <id>http://example.com/2022/09/11/09-20-48/</id>
    <published>2022-09-11T01:20:48.000Z</published>
    <updated>2022-09-11T01:29:37.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-JDBC概述"><a href="#第一章-JDBC概述" class="headerlink" title="第一章 JDBC概述"></a>第一章 JDBC概述</h2><h3 id="1-jdbc的概念"><a href="#1-jdbc的概念" class="headerlink" title="1.jdbc的概念"></a>1.jdbc的概念</h3><p>JDBC（Java DataBase Connectivity：java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系型数据库提供统一访问，它是由一组用Java语言编写的类和接口组成的。<br>JDBC的作用：可以通过java代码操作数据库</p><span id="more"></span><h3 id="2-jdbc的本质"><a href="#2-jdbc的本质" class="headerlink" title="2.jdbc的本质"></a>2.jdbc的本质</h3><p>其实就是java官方提供的一套规范(接口)。用于帮助开发人员快速实现不同关系型数据库的连接！</p><h3 id="2-面向接口编程的思想"><a href="#2-面向接口编程的思想" class="headerlink" title="2.面向接口编程的思想"></a>2.面向接口编程的思想</h3><ol><li>JDBC 是 sun 公司提供一套用于数据库操作的接口，java 程序员只需要面向这套接口编程即可。</li><li>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</li></ol><h2 id="第二章-数据库的连接"><a href="#第二章-数据库的连接" class="headerlink" title="第二章 数据库的连接"></a>第二章 数据库的连接</h2><h3 id="1、数据库连接的一般步骤"><a href="#1、数据库连接的一般步骤" class="headerlink" title="1、数据库连接的一般步骤"></a>1、数据库连接的一般步骤</h3><ol><li>配置连接的基本信息：url、user、password</li><li>加载驱动：其实分为新建驱动、注册驱动和加载驱动三步，但是一般直接加载驱动，java 会自动的新建驱动和注册驱动（见下方代码，其中提供了静态代码块，来实现这两部分操作）</li><li>获得连接</li></ol><h3 id="2、数据库连接代码示例（MySQL）"><a href="#2、数据库连接代码示例（MySQL）" class="headerlink" title="2、数据库连接代码示例（MySQL）"></a>2、数据库连接代码示例（MySQL）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">        <span class="comment">// 当前类.class.获取类加载器.获取输入流的文件名</span></span><br><span class="line"><span class="comment">// 自定义类是由系统类加载器加载的</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意！！！</strong>：</p><ul><li>用 I&#x2F;O 流的方式来获取配置文件</li><li>用系统类加载器来加载自定义类</li></ul><p>其中，配置文件【<strong>jdbc.properties</strong>】：此配置文件声明在工程的src下（下面为 MySQL 8.0 版本的配置信息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">user=root</span><br><span class="line">password=<span class="number">7421279</span></span><br><span class="line">driverClass=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用配置文件的好处：</p><ul><li>实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码 ；</li><li>如果修改了配置信息，省去重新编译的过程，代码效率更高。</li></ul><h3 id="3、JDBCUtils（操作数据库的工具类）"><a href="#3、JDBCUtils（操作数据库的工具类）" class="headerlink" title="3、JDBCUtils（操作数据库的工具类）"></a>3、JDBCUtils（操作数据库的工具类）</h3><p>每一次与数据库交互都要进行连接，关闭资源等，所以将其封装成工具类，使用时直接调用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu3.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Connection conn, Statement ps)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">                rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第三章：使用-PreparedStatement-实现-CRUD-操作"><a href="#第三章：使用-PreparedStatement-实现-CRUD-操作" class="headerlink" title="第三章：使用 PreparedStatement 实现 CRUD 操作"></a>第三章：使用 PreparedStatement 实现 CRUD 操作</h2><h3 id="1、Statement-使用的弊端"><a href="#1、Statement-使用的弊端" class="headerlink" title="1、Statement 使用的弊端"></a>1、Statement 使用的弊端</h3><ol><li>存在拼串操作，繁琐</li><li>存在 SQL 注入问题</li><li>没办法操作Blob类型变量</li><li>实现批量插入时，效率较低</li></ol><p>问题一（拼串操作）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = new Scanner(System.<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">String userName = scan.next();</span><br><span class="line">System.out.print(<span class="string">&quot;密   码：&quot;</span>);</span><br><span class="line">String password = scan.next();</span><br><span class="line"></span><br><span class="line">// SELECT user,password FROM user_table WHERE USER = <span class="string">&#x27;1&#x27;</span> or <span class="string">&#x27; AND PASSWORD = &#x27;</span> =<span class="string">&#x27;1&#x27;</span> or <span class="string">&#x27;1&#x27;</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">String sql = <span class="string">&quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot;</span> + userName + <span class="string">&quot;&#x27; AND PASSWORD = &#x27;&quot;</span> + password + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题二（SQL注入）:</p><p>恶意拼接查询</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users <span class="type">WHERE</span> <span class="variable">user_id</span> <span class="operator">=</span> $user_id</span><br></pre></td></tr></table></figure><p>其中，user_id 是传入的参数，如果传入的参数值为“1234; DELETE FROM users”，那么最终的查询语句会变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users <span class="type">WHERE</span> <span class="variable">user_id</span> <span class="operator">=</span> <span class="number">1234</span>; DELETE FROM users</span><br></pre></td></tr></table></figure><p>如果以上语句执行，则会删除 users 表中的所有数据。</p><h3 id="2、PreparedStatement-替换-Statement-实现-CRUD-操作"><a href="#2、PreparedStatement-替换-Statement-实现-CRUD-操作" class="headerlink" title="2、PreparedStatement 替换 Statement 实现 CRUD 操作"></a>2、PreparedStatement 替换 Statement 实现 CRUD 操作</h3><p>PreparedStatement的理解：<br>① PreparedStatement 是 Statement 的子接口<br>② An object that represents a precompiled SQL statement. （预编译 SQL 语句，只需要填空即可）<br>③ 可以解决Statement的sql注入问题，拼串问题</p><h3 id="3、使用-PreparedStatement-实现通用的查询操作"><a href="#3、使用-PreparedStatement-实现通用的查询操作" class="headerlink" title="3、使用 PreparedStatement 实现通用的查询操作"></a>3、使用 PreparedStatement 实现通用的查询操作</h3><ol><li>获取与数据库的连接 Connection</li><li>预编译 sql 语句，返回 PreparedStatement 的实例</li><li>填充占位符</li><li>执行此 PreparedStatement 对象中的 SQL 查询语句，并返回一个结果集 ResultSet</li><li>通过 ResultSet 得到结果集的元数据：ResultSetMetaData</li><li>通过 ResultSetMetaData 得到 数据集列数 columnCount，数据列别名 columnLabel；通过 ResultSet 得到列值；使用反射，给对象的相应属性赋值，给t对象指定的 columnLabel 属性，赋值为 columValue</li><li>关闭 Connection，PreparedStatement，ResultSet 资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 :ResultSetMetaData</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                <span class="comment">// 处理结果集一行数据中的每一个列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    <span class="comment">// String columnName = rsmd.getColumnName(i + 1);</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(t, columValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getForList</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 :ResultSetMetaData</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">            <span class="comment">//创建集合对象</span></span><br><span class="line">            ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                <span class="comment">// 处理结果集一行数据中的每一个列:给t对象指定的属性赋值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    <span class="comment">// String columnName = rsmd.getColumnName(i + 1);</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(t, columValue);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);<span class="comment">//对于查询到的多条数据来说，把每一个对象放进集合里</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>两种思想：</strong><br>（1）面向接口编程的思想<br>（2）<strong>ORM 编程思想</strong>：（object relational mapping），有点万事万物皆对象那种意思</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul><p><strong>两种技术：</strong></p><p>（1）使用结果集的元数据：ResultSetMetaData</p><blockquote><p>getColumnCount()：获取列数</p><p>getColumnLabel()：获取列的别名<br>说明：如果 sql 中没给字段其别名，getColumnLabel()获取的就是列名</p></blockquote><p>（2）反射的使用</p><blockquote><p>创建对应的<strong>运行时类的对象</strong><br>在运行时，动态的调用指定的<strong>运行时类的属性、方法</strong></p></blockquote><h2 id="4、PreparedStatement-与-Statement-的异同"><a href="#4、PreparedStatement-与-Statement-的异同" class="headerlink" title="4、PreparedStatement 与 Statement 的异同"></a>4、PreparedStatement 与 Statement 的异同</h2><p>①PreparedStatement 是Statement的子类</p><p>②Statement 存在SQL注入问题，实际开发中选用PreparedStatement替换Statement</p><p>③PreparedStatement是预编译SQL语句，用占位符其可读性高，安全性高</p><p>④PreparedStatement<strong>预编译</strong>可以提供优化，在被DBServer编译后会缓存下来，从而在处理大量数据时的速度也会更快</p><h2 id="第四章-数据库事务"><a href="#第四章-数据库事务" class="headerlink" title="第四章 数据库事务"></a>第四章 数据库事务</h2><h3 id="1、事务"><a href="#1、事务" class="headerlink" title="1、事务"></a>1、事务</h3><ol><li>一组逻辑操作单元,使数据从一种状态变换到另一种状态。</li><li>一组逻辑操作单元：一个或多个DML操作。</li></ol><h3 id="2、事务处理的原则（提交or回滚）"><a href="#2、事务处理的原则（提交or回滚）" class="headerlink" title="2、事务处理的原则（提交or回滚）"></a>2、事务处理的原则（提交or回滚）</h3><p>保证所事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。<br>当在一个事务中执行多个操作时，<strong>要么所有的事务都被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，</strong>整个事务回滚(rollback)到最初状态。</strong></p><p>说明：<br>1.数据一旦提交，就不可回滚<br>2.哪些操作会导致数据的自动提交？</p><p>DDL操作一旦执行，都会自动提交。</p><blockquote><ul><li>set autocommit &#x3D; false 对 DDL 操作失效</li><li>DML默认情况下，一旦执行，就会自动提交。</li><li>我们可以通过 set autocommit &#x3D; false 的方式取消 DML 操作的自动提交。</li><li>默认在关闭连接时，会自动的提交数据</li></ul></blockquote><h2 id="3、事务的-ACID-属性"><a href="#3、事务的-ACID-属性" class="headerlink" title="3、事务的 ACID 属性"></a>3、事务的 ACID 属性</h2><ol><li><strong>原子性（Atomicity）</strong>： 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li><strong>一致性（Consistency）</strong> ：事务必须使数据库从一个<strong>一致性状态</strong>变换到另外一个一致性状态。</li><li>隔离性（Isolation） ：事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，<strong>并发执行的各个事务之间不能互相干扰。</strong></li><li>持久性（Durability） ：持久性是指一个<strong>事务一旦被提交</strong>，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</li></ol><h3 id="3-1-数据库的并发问题"><a href="#3-1-数据库的并发问题" class="headerlink" title="3.1 数据库的并发问题"></a>3.1 数据库的并发问题</h3><h4 id="1-脏读（dirty-read）"><a href="#1-脏读（dirty-read）" class="headerlink" title="1.脏读（dirty read）"></a>1.脏读（dirty read）</h4><p> A事务读取了B事务尚未提交的更改数据，并且在这个数据基础上进行操作。如果此时恰巧B事务进行回滚，那么A事务读到的数据是根本不被承认的。</p><h4 id="2-不可重复读（unrepeatable-read）"><a href="#2-不可重复读（unrepeatable-read）" class="headerlink" title="2.不可重复读（unrepeatable read）"></a>2.不可重复读（unrepeatable read）</h4><p> 不可重复读是指A事务读取了B事务已经提交的更改数据。假设A在取款事务的过程中，B往该账户转账100元，A两次读取账户的余额发生不一致</p><h4 id="3-幻读（phantom-read）"><a href="#3-幻读（phantom-read）" class="headerlink" title="3.幻读（phantom read）"></a>3.幻读（phantom read）</h4><p> A事务读取B提交的新增数据，这时A事务将出现幻想读的问题。幻读一般发生在计算统计数据的事务中。举个例子，假设银行系统在同一个事务中两次统计存款的总金额，在两次统计过程中，刚好新增了一个存款账户，并存入100元，这时两次统计的总金额将不一致。</p><h2 id="第四章-数据库连接池"><a href="#第四章-数据库连接池" class="headerlink" title="第四章 数据库连接池"></a>第四章 数据库连接池</h2><h3 id="1、什么是连接池"><a href="#1、什么是连接池" class="headerlink" title="1、什么是连接池"></a>1、什么是连接池</h3><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p><h3 id="2、使用数据库连接池的好处"><a href="#2、使用数据库连接池的好处" class="headerlink" title="2、使用数据库连接池的好处"></a>2、使用数据库连接池的好处</h3><ol><li>提高程序的响应速度(减少了创建连接相应的时间)</li><li>降低资源的消耗(可以重复使用已经提供好的连接)</li><li>便于连接的管理，可以设置最大数据库连接数量、最大连接活跃数等等</li></ol><h3 id="3、实现的方式（推荐使用Druid）"><a href="#3、实现的方式（推荐使用Druid）" class="headerlink" title="3、实现的方式（推荐使用Druid）"></a>3、实现的方式（推荐使用Druid）</h3><p><strong>JDBC</strong>的数据库连接池使用javax.sql.DataSource来表示,DataSource只是一个接口,该接口通常由服务器(Weblogic,WwebSphere,Tomcat)提供实现,也有一些开源组织提供实现:</p><ul><li>DBCP</li><li>C3P0</li><li>Proxool</li><li>BoneCP</li><li><strong>Druid</strong></li></ul><h3 id="4、如何使用数据库连接池（以Druid为例）"><a href="#4、如何使用数据库连接池（以Druid为例）" class="headerlink" title="4、如何使用数据库连接池（以Druid为例）"></a>4、如何使用数据库连接池（以Druid为例）</h3><ol><li>导入jar包：</li><li>测试连接的代码：<br>（1）加载配置文件<br>（2）获取数据库连接池中的连接<br>（3）与数据库建立连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">source</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pros);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装成 JDBCUtils 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Druid数据库连接池技术</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource source1;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">pros.load(is);</span><br><span class="line">source1 = DruidDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source1.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 每次加载类的收只用创建一个 Druid 数据库连接池，这里使用静态代码块来实现。</p><p>3.配置文件定义在 src 下：druid.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">///test</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">7421279</span></span><br><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第五章-DBUtils-提供的-jar-包实现-CRUD-操作"><a href="#第五章-DBUtils-提供的-jar-包实现-CRUD-操作" class="headerlink" title="第五章 DBUtils 提供的 jar 包实现 CRUD 操作"></a>第五章 DBUtils 提供的 jar 包实现 CRUD 操作</h2><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库,封装了针对于数据库的增删改查操作</p><p>1、导入jar包：</p><p>2、使用现成的 jar 中的 QueryRunner 测试增、删、改的操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试插入</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">insertCount</span> <span class="operator">=</span> runner.update(conn, sql, <span class="string">&quot;蔡徐坤&quot;</span>,<span class="string">&quot;caixukun@126.com&quot;</span>,<span class="string">&quot;1997-09-08&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;添加了&quot;</span> + insertCount + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、使用现成的 jar 中的 QueryRunner 测试查询的操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BeanHander:是ResultSetHandler接口的实现类，用于封装表中的一条记录，表中的记录封装完之后返回一个对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Customer.class);</span><br><span class="line"><span class="comment">//ResultSetHandler（接口）是结果集的一个处理器，有多种实现类，其中BeanHandler是通用的</span></span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler, <span class="number">26</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BeanListHandler:是ResultSetHandler接口的实现类，用于封装表中的多条记录构成的集合。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">BeanListHandler&lt;Customer&gt;  handler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * MapHander:是ResultSetHandler接口的实现类，对应表中的一条记录。</span></span><br><span class="line"><span class="comment"> * 将字段及相应字段的值作为map中的key和value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"><span class="type">MapHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapHandler</span>();</span><br><span class="line">Map&lt;String, Object&gt; map = runner.query(conn, sql, handler, <span class="number">26</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * MapListHander:是ResultSetHandler接口的实现类，对应表中的多条记录。</span></span><br><span class="line"><span class="comment"> * 将字段及相应字段的值作为map中的key和value。将这些map添加到List中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">MapListHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapListHandler</span>();</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ScalarHandler:用于查询特殊值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery5</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from customers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ScalarHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> (Long) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery6</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ScalarHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line"><span class="type">Date</span> <span class="variable">maxBirth</span> <span class="operator">=</span> (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(maxBirth);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery7</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"><span class="comment">//提供一个handler的匿名实现类</span></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">ResultSetHandler</span>&lt;Customer&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Customer <span class="title function_">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;handle&quot;);</span></span><br><span class="line"><span class="comment">//return null;</span></span><br><span class="line"><span class="comment">//return new Customer(12, &quot;成龙&quot;, &quot;Jacky@126.com&quot;, new Date(234324234324L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(id, name, email, birth);</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//handler中最后返回的对象就是这里query最终的返回对象</span></span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler,<span class="number">26</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、使用 dbutils.jar 包中的 DbUtils 工具类实现连接等资源的关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource1</span><span class="params">(Connection conn,Statement ps,ResultSet rs)</span>&#123;</span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//DbUtils.close(conn);</span></span><br><span class="line"><span class="comment">//&#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//DbUtils.close(ps);</span></span><br><span class="line"><span class="comment">//&#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//DbUtils.close(rs);</span></span><br><span class="line"><span class="comment">//&#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">DbUtils.closeQuietly(conn);</span><br><span class="line">DbUtils.closeQuietly(ps);</span><br><span class="line">DbUtils.closeQuietly(rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第一章-JDBC概述&quot;&gt;&lt;a href=&quot;#第一章-JDBC概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 JDBC概述&quot;&gt;&lt;/a&gt;第一章 JDBC概述&lt;/h2&gt;&lt;h3 id=&quot;1-jdbc的概念&quot;&gt;&lt;a href=&quot;#1-jdbc的概念&quot; class=&quot;headerlink&quot; title=&quot;1.jdbc的概念&quot;&gt;&lt;/a&gt;1.jdbc的概念&lt;/h3&gt;&lt;p&gt;JDBC（Java DataBase Connectivity：java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系型数据库提供统一访问，它是由一组用Java语言编写的类和接口组成的。&lt;br&gt;JDBC的作用：可以通过java代码操作数据库&lt;/p&gt;</summary>
    
    
    
    <category term="JDBC" scheme="http://example.com/categories/JDBC/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://example.com/2022/09/04/10-48-48/"/>
    <id>http://example.com/2022/09/04/10-48-48/</id>
    <published>2022-09-04T02:48:48.000Z</published>
    <updated>2022-09-04T05:42:02.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章的环境是在windows环境下编写。</p><p>在日常工作中git少不了，所以编写本篇文章教大家如何使用git，便于日后工作与学习。</p><p>git命令很多，但是常用的只有十多个。</p><span id="more"></span><p><a href="#conclusion">命令总结</a></p><h2 id="发展过程"><a href="#发展过程" class="headerlink" title="发展过程"></a>发展过程</h2><p>Git最初是由Linux开发者Linus用了仅仅两周时间纯C语言编写而成，在编写完成之后就立马上手接管Linux源代码，不过在此之前Linux是由BitMover公司开发的BitKeeper分布式版本控制系统所管理源代码，它是商业收费的分布式版本控制器，但BitMover公司看中Linux开源精神，免费授权给Linux社区使用，在2002年时，Linux开始使用BitKeeper分布式版本控制系统管理源代码，但好景不长，有一天Linux社区成员Andrew（samba（局域网共享文件c&#x2F;s程序）的作者）试图破解BitKeeper共享给所有人使用，被BitMover公司发现并收回了免费使用的版权，随后Linus就用了两周时间开发出了git(两周时间包括测试)，也就是目前为止最好用的分布式版本控制系统。</p><h2 id="集中式与分布式的区别"><a href="#集中式与分布式的区别" class="headerlink" title="集中式与分布式的区别"></a>集中式与分布式的区别</h2><p>除了git还有svn、cvs这样的版本控制系统，它们的区别在于一个是分布式一个是集中式</p><p>集中式就是svn和csv这样的版本控制系统，分布式是git</p><p>区别在于集中式的版本控制系统每次在写代码时都需要从服务器中拉取一份下来，并且如果服务器丢失了，那么所有的就都丢失了，你本机客户端仅保存当前的版本信息，换句话说，集中式就是把代码放在一个服务器上集中管理，你的所有回滚等操作都需要服务器的支持。</p><p>分布式的区别在于，每个人的电脑都是服务器，当你从主仓库拉取一份代码下来后，你的电脑就是服务器，无需担心主仓库被删或者找不到的情况，你可以自由在本地回滚，提交，当你想把自己的代码提交到主仓库时，只需要合并推送到主仓库就可以了，同时你可以把自己的代码新建一份仓库分享给其它人。</p><p>像集中式它们都有一个主版本号，所有的版本迭代都以这个版本号为主，而分布式因为每个客户端都是服务器，git没有固定的版本号，但是有一个由哈希算法算出的id，用来回滚用的，同时也有一个master仓库，这个仓库是一切分支仓库的主仓库，我们可以推送提交到master并合并到主仓库上，主仓库的版本号会迭代一次，我们客户端上的git版本号无论迭代多少次，都跟master无关，只有合并时，master才会迭代一次。</p><h2 id="Windows安装Git"><a href="#Windows安装Git" class="headerlink" title="Windows安装Git"></a>Windows安装Git</h2><p><a href="https://www.jianshu.com/p/414ccd423efc">Git安装教程（Windows安装超详细教程） - 简书 (jianshu.com)</a></p><p>可以参考这位博主，写的很详细了。</p><h2 id="配置git环境：git-config-–global"><a href="#配置git环境：git-config-–global" class="headerlink" title="配置git环境：git config –global"></a>配置git环境：git config –global</h2><p>参数讲解：</p><blockquote><p>config：参数是用来配置git环境的</p><p>–global：长命令表示配置整个git环境</p></blockquote><p>初次使用git需要设置你的用户名以及邮箱，这将作为当前机器git的标识，如果你用它来下载远程仓库一些需要登录权限的仓库会要求登录，git默认使用配置邮箱以及用户名登入，但会要求你手动输入密码</p><p>用户名配置</p><blockquote><p>user代表用户，.name代表配置用户的名称</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br></pre></td></tr></table></figure><p>邮箱配置</p><blockquote><p>user代表用户，.email代表配置用户的邮箱</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><h2 id="创建本地空仓库：git-init"><a href="#创建本地空仓库：git-init" class="headerlink" title="创建本地空仓库：git init"></a>创建本地空仓库：git init</h2><blockquote><p>init：初始化当前目录为仓库，初始化后会自动将当前仓库设置为master</p></blockquote><p>创建本地仓库的条件是需要一个空目录，然后在空目录中初始化你的项目</p><p>如我想创建一个名为“test”的空项目</p><p>1.创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>2.进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>3.使用git init初始化当前仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="新建文件添加到本地仓库：git-add、git-commit-m"><a href="#新建文件添加到本地仓库：git-add、git-commit-m" class="headerlink" title="新建文件添加到本地仓库：git add、git commit -m"></a>新建文件添加到本地仓库：git add、git <a href="https://so.csdn.net/so/search?q=commit&spm=1001.2101.3001.7020">commit</a> -m</h2><blockquote><p>add：将文件添加到缓存区</p><p>commit：提交到本地仓库</p></blockquote><h2 id="将所有改动文件添加到缓存区：git-add-–all、git-add"><a href="#将所有改动文件添加到缓存区：git-add-–all、git-add" class="headerlink" title="将所有改动文件添加到缓存区：git add –all、git add ."></a>将所有改动文件添加到缓存区：git add –all、git add .</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="查看历史提交日志：git-log"><a href="#查看历史提交日志：git-log" class="headerlink" title="查看历史提交日志：git log"></a>查看历史提交日志：git log</h2><blockquote><p>log：查看日志</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h2 id="回滚代码仓库：git-reset-–hard"><a href="#回滚代码仓库：git-reset-–hard" class="headerlink" title="回滚代码仓库：git reset –hard"></a>回滚代码仓库：git <a href="https://so.csdn.net/so/search?q=reset&spm=1001.2101.3001.7020">reset</a> –hard</h2><p>reset参数是重置命令</p><p>–hard是重置代码仓库版本</p><p>1.回滚到指定历史版本</p><p>先使用git log查看历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>在使用git reset –hard命令回滚</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 要回滚<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>2.回滚当前仓库指向的版本</p><p>HEAD是指向当前仓库的，历史版本中可能有别的分支，我们只想迭代我们仓库的上一个版本，这个很简单，我们只需要用HEAD来指向就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>^代表上一个版本的意思，HEAD代表当前仓库的指向，当前HEAD指向master，就代表回滚到master上一次提交的版本</p><p>当然我们也可以使用另外一种方式来回滚到当前仓库的指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~3</span><br></pre></td></tr></table></figure><p>后面的~ 3，代表以当前版本为基数，回滚多少次。HEAD~3代表回滚master前三个版本</p><p>如果觉得log打印内容过多，可以加上–pretty&#x3D;oneline选项简洁输出</p><h2 id="查看提交之后文件是否做了改动：git-status"><a href="#查看提交之后文件是否做了改动：git-status" class="headerlink" title="查看提交之后文件是否做了改动：git status"></a>查看提交之后文件是否做了改动：git status</h2><blockquote><p>status：查看当前仓库状态</p></blockquote><p>我们在提交完成之后，有时候可能自己不小心改动了某个文件，或者别人，我们可以使用git status查看文件是否被改动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="工作区与缓存区"><a href="#工作区与缓存区" class="headerlink" title="工作区与缓存区"></a>工作区与缓存区</h2><p>在git下有一个概念是缓存区，这是其它集中式版本控制系统没有的</p><p>工作区：工作区就是你当前的工作目录</p><p>缓存区：这里存放了你使用git add命令提交的文件描述信息，它位于.git目录下的index文件中</p><h2 id="删除文件：git-rm"><a href="#删除文件：git-rm" class="headerlink" title="删除文件：git rm"></a>删除文件：git rm</h2><p>如果我们使用普通的命令，rm删除文件，git状态会提示你删除了文件，你只需要使用add重新提交一次就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> X</span><br></pre></td></tr></table></figure><h2 id="查看提交历史：git-reflog"><a href="#查看提交历史：git-reflog" class="headerlink" title="查看提交历史：git reflog"></a>查看提交历史：git reflog</h2><p>git reflog可以查看当前版本库的提交历史，凡是对仓库版本进行迭代的都会出现在这个里面，包括你回滚版本都会出现在这个历史中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="git创建分支：git-branch、git-checkout"><a href="#git创建分支：git-branch、git-checkout" class="headerlink" title="git创建分支：git branch、git checkout"></a>git创建分支：git branch、git checkout</h2><p>使用git checkout -b参数来创建一个分支，创建完成分支后会自动切换过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p>然后我们在使用branch来查看当前属于哪个分支，也就是查看HEAD的指向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>git checkout -b等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>git branch 如果后面跟着名字则会创建分支，但不会切换</p><p>git checkout 后面如果是分支名称则切换过去</p><h2 id="git切换分支：git-checkout"><a href="#git切换分支：git-checkout" class="headerlink" title="git切换分支：git checkout"></a>git切换分支：git checkout</h2><p>当我们想切换分支可以使用git checkout来切换，如刚刚我们创建了一个分支dev并切换了过去，现在切换回masterk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>git checkout的作用是检出，如果是文件的话，会放弃对文件的缓存区操作，但是要使用reset重置一下变更才行。</p><p>如果是分支的话会切换过去。</p><h2 id="git合并分支：git-merge"><a href="#git合并分支：git-merge" class="headerlink" title="git合并分支：git merge"></a>git合并分支：git merge</h2><p>当我们新建分支并做完工作之后，想要把分支提交至master，只需要切换到master仓库，并执行git merge 分支名就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><h2 id="git查看分支：git-branch-a"><a href="#git查看分支：git-branch-a" class="headerlink" title="git查看分支：git branch -a"></a>git查看分支：git branch -a</h2><p>如果要查看当前所有分支可以使用：git branch -a</p><p>HEAD指向当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><h2 id="git删除本地分支：git-branch-D"><a href="#git删除本地分支：git-branch-D" class="headerlink" title="git删除本地分支：git branch -D"></a>git删除本地分支：git branch -D</h2><p>git branch -D 分支名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure><h2 id="git删除远程分支：git-push-origin-–delete"><a href="#git删除远程分支：git-push-origin-–delete" class="headerlink" title="git删除远程分支：git push origin –delete"></a>git删除远程分支：git push origin –delete</h2><p>注意这里的远程分支名不需要加origin，输入分支名就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 远程分支名</span><br></pre></td></tr></table></figure><h2 id="gitee的使用"><a href="#gitee的使用" class="headerlink" title="gitee的使用"></a>gitee的使用</h2><p>1.首先到gitee上注册一个你的账号</p><p>2.在本地创建一个ssh的key，因为gitee是使用ssh服务进行通讯的</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>它会要求输入Enter file in which to save the key (&#x2F;home&#x2F;stephenzhou&#x2F;.ssh&#x2F;id_rsa)</p><p>这里是生成的sshkey文件名，我们可以回车使用默认文件名</p><p>除此之外还会让你输入</p><p>Created directory ‘&#x2F;home&#x2F;stephenzhou&#x2F;.ssh’.<br>Enter passphrase (empty for no passphrase):<br>这个密码会在让你push提交时候要输入的，除了git登录密码，还要输入这个密码，直接回车则空密码，这里我们直接回车</p><p>接着会让你在此输入密码，验证这里依旧回车</p><p>Enter same passphrase again：</p><p>生成之后你就会看到这样的界面:</p><p><img src="/2022/09/04/10-48-48/image-20220904125734139.png" alt="image-20220904125734139"></p><p>生成的ssh文件如果不使用-f指定的话会生成在用户目录下的.ssh目录中，.ssh是隐藏文件，可以使用ls -ah看到，使用cd ~进入用户主目录，然后cd进入到.ssh目录中可以看到文件</p><p><img src="/2022/09/04/10-48-48/image-20220904130103886.png" alt="image-20220904130103886"></p><p>打开id_rsa.pub文件、全选、复制</p><p>id_rsa是私匙，id_rsa.pub是公匙，id_rsa不能告诉任何人，只有公钥可以，ssh采用的是非对称加密。</p><p>接着在gitee上添加你的公钥</p><p><img src="/2022/09/04/10-48-48/image-20220904130350701.png" alt="image-20220904130350701"></p><p><img src="/2022/09/04/10-48-48/image-20220904130452511.png" alt="image-20220904130452511"></p><p>最后在输入你的gitee登录密码就可以了</p><h2 id="gitee将本地仓库关联到远程仓库：git-remote-add-origin"><a href="#gitee将本地仓库关联到远程仓库：git-remote-add-origin" class="headerlink" title="gitee将本地仓库关联到远程仓库：git remote add origin"></a>gitee将本地仓库关联到远程仓库：git remote add origin</h2><p>我们本地有一个仓库，我们想把它推送到远程上去，很简单，我们只需要使用git remote add origin命令就可以了，ongin是gitee上的仓库名称，意思是远程仓库的意思。</p><p>首先选择仓库的code找到gitee生成的远程仓库链接</p><p><img src="/2022/09/04/10-48-48/image-20220904130711504.png" alt="image-20220904130711504"></p><p>然后关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:beiszhihao/test.git</span><br></pre></td></tr></table></figure><p>然后使用git push推送到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="git将远程仓库关联到本地和拉取指定分支、切换远程分支：git-clone"><a href="#git将远程仓库关联到本地和拉取指定分支、切换远程分支：git-clone" class="headerlink" title="git将远程仓库关联到本地和拉取指定分支、切换远程分支：git clone"></a>git将远程仓库关联到本地和拉取指定分支、切换远程分支：git clone</h2><p>当我们远程有仓库时，想要关联到本地只需要使用git clone就可以了</p><p>新建一个空目录，不要git init</p><p>使用git clone会自动帮我们初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:beiszhihao/test.git</span><br></pre></td></tr></table></figure><h2 id="gitee提交本地仓库到远程仓库：git-add、git-commit、git-push"><a href="#gitee提交本地仓库到远程仓库：git-add、git-commit、git-push" class="headerlink" title="gitee提交本地仓库到远程仓库：git add、git commit、git push"></a>gitee提交本地仓库到远程仓库：git add、git commit、git push</h2><p>使用git add提交到缓存区，在使用commit提交到本地仓库，在使用push推送到远程就可以了，非常简单，命令都是我们学过的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add XX</span><br><span class="line">git commit -m <span class="string">&quot;XX&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="git命令总结"><a href="#git命令总结" class="headerlink" title="git命令总结"></a><div id="conclusion">git命令总结<div></div></div></h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>：         XX (创建一个空目录 XX指目录名)</span><br><span class="line">   </span><br><span class="line">git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</span><br><span class="line">   </span><br><span class="line">git add XX       把xx文件添加到暂存区去。</span><br><span class="line">   </span><br><span class="line">git commit –m “XX”  提交文件 –m 后面的是注释。</span><br><span class="line">   </span><br><span class="line">git status        查看仓库状态</span><br><span class="line">   </span><br><span class="line">git <span class="built_in">log</span>          查看历史记录</span><br><span class="line">   </span><br><span class="line">git reset  --hard HEAD^ 或者 git reset  --hard HEAD~ 回退到上一个版本</span><br><span class="line">(如果想回退到100个版本，使用git reset –hard HEAD~100 )</span><br><span class="line">   </span><br><span class="line">git reflog       查看历史记录的版本号<span class="built_in">id</span></span><br><span class="line">   </span><br><span class="line">git checkout -- XX  把XX文件在工作区的修改全部撤销。</span><br><span class="line">   </span><br><span class="line">git <span class="built_in">rm</span> XX          删除XX文件</span><br><span class="line">   </span><br><span class="line">git remote add origin https://gitee.com/tugenhua0707/testgit 关联一个远程库</span><br><span class="line">   </span><br><span class="line">git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库</span><br><span class="line">   </span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/tugenhua0707/testgit  从远程库中克隆</span><br><span class="line">   </span><br><span class="line">git checkout –b dev  创建dev分支 并切换到dev分支上</span><br><span class="line">   </span><br><span class="line">git branch  查看当前所有的分支</span><br><span class="line">   </span><br><span class="line">git checkout master 切换回master分支</span><br><span class="line">   </span><br><span class="line">git branch –d dev 删除dev分支</span><br><span class="line">   </span><br><span class="line">git branch name  创建分支</span><br><span class="line">   </span><br><span class="line">git remote 查看远程库的信息</span><br><span class="line">   </span><br><span class="line">git remote –v 查看远程库的详细信息</span><br><span class="line">   </span><br><span class="line">git push origin master  Git会把master分支推送到远程库对应的远程分支上</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章的环境是在windows环境下编写。&lt;/p&gt;
&lt;p&gt;在日常工作中git少不了，所以编写本篇文章教大家如何使用git，便于日后工作与学习。&lt;/p&gt;
&lt;p&gt;git命令很多，但是常用的只有十多个。&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
    <category term="gitee" scheme="http://example.com/tags/gitee/"/>
    
  </entry>
  
</feed>
